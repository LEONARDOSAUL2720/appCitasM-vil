npx expo start








Safe Area View;
Se utiliza para asegurar que el contenido de la aplicación esté dentro de áreas seguras. Puede ser útil en dispositivos con muescas o barras de estado.

import { SafeAreaView, Text } from 'react-native';
const App = () => (
  <SafeAreaView>
    <Text>Contenido seguro aquí</Text>
  </SafeAreaView>
);






Scroll View:
Se utiliza para desplazar y mostrar contenido que no cabe completamente en la pantalla.
jsx
import { ScrollView, Text } from 'react-native';

const App = () => (
  <ScrollView>
    <Text>Contenido que puede desplazarse</Text>
  </ScrollView>
);






Stylesheet:
se manda a llamar archivo o scrip para usar los estilo, Se utiliza para definir estilos en React Native de manera similar a CSS en la web.
jsx
import { StyleSheet, Text, View } from 'react-native';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

const App = () => (
  <View style={styles.container}>
    <Text>Estilos aplicados</Text>
  </View>
);





Modal:
Se utiliza para mostrar contenido superpuesto.
jsx
import { Modal, Text, View } from 'react-native';

const App = () => (
  <View>
    <Modal>
      <View>
        <Text>Contenido del modal</Text>
      </View>
    </Modal>
    <Text>Contenido principal</Text>
  </View>
);






Alert:
Se utiliza para mostrar mensajes de alerta al usuario.
jsx
import { Alert, Button } from 'react-native';

const showAlert = () => {
  Alert.alert('Título', 'Mensaje de alerta');
};

const App = () => (
  <Button title="Mostrar Alerta" onPress={showAlert} />
);





Pressable:
Se utiliza para envolver otros componentes y proporciona detección de prensa. Puede utilizarse para implementar botones y acciones interactivas.
jsx
import { Pressable, Text } from 'react-native';

const handlePress = () => {
  console.log('¡Presionado!');
};

const App = () => (
  <Pressable onPress={handlePress}>
    <Text>Presioname</Text>
  </Pressable>
);






Button:
Un componente de botón predefinido que se utiliza para capturar eventos de clic. Es una interfaz simple para que los usuarios realicen acciones.
jsx
import { Button, View } from 'react-native';

const handlePress = () => {
  console.log('¡Botón presionado!');
};

const App = () => (
  <View>
    <Button title="Presioname" onPress={handlePress} />
  </View>
);






Text:
Se utiliza para mostrar texto en la interfaz de usuario. Puede contener estilos y formato de texto.
jsx
import { Text, View } from 'react-native';

const App = () => (
  <View>
    <Text>¡Hola, mundo!</Text>
  </View>
);






View:
Esencialmente un contenedor que se utiliza para agrupar otros componentes. Se utiliza para organizar y estructurar la interfaz de usuario.
jsx
import { View, Text } from 'react-native';

const App = () => (
  <View>
    <Text>Contenido dentro de View</Text>
  </View>
);







}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
import React,  { useState } from 'react'

import { 
    StyleSheet,
    Text,
    View,
    SafeAreaView,
    Modal, 
    Pressable,
    TextInput,
    ScrollView,
    TouchableOpacity,

  
  } from 'react-native';


  const Formulario = ({ modalVisible, setModalVisible }) => {
    
   // LOS HOKS SE COLOCAN EN LA PARTE SUPERIOR
   const [mmodalVisible, setMModalVisible] = useState(false) // el primer parametro es el nombre y el segundo es el nombre pero que cambia el estado de hook

    
  const {pacienteNombre, setPacienteNombre} = useState('')
  const {pacientePropietario, setPacientePropietario} = useState('')
  const {pacienteEmail, setPacienteEmail} = useState('')
  const {pacienteTelefono, setPacienteTelefono} = useState('')
  const {pacienteSintoma, setPacienteSintoma} = useState('')
  


    return(
        <Modal animationType='slider' visible={modalVisible}>
        <SafeAreaView style ={styles.contenido}>

       <TouchableOpacity style={styles.btnSalir} 
       onPress={() => setModalVisible(false)}>
        <Text style={styles.label}>Salir</Text>
        </TouchableOpacity>


      <ScrollView>
          <Text style={styles.titulo}
           >Nueva{''}
          <Text style={styles.titulo2} >
            Cita</Text>
          </Text>

          <View style={styles.campo}>
            <Text style={styles.label}> Nombre Pacientes</Text>
            <TextInput 
            style={styles.input}
            placeholder='Nombre Paciente'
              KeyboardType='number-pad'
              placeholderTextColor={'#000'}
              value={pacienteNombre}
              onChangeText={setPacienteNombre}
            />
          </View>

          <View style={styles.campo}>
            <Text style={styles.label}>Nombre del Propietario</Text>
            <TextInput 
            style={styles.input}
            placeholder='Nombre del Propietario'
              KeyboardType='number-pad'
              placeholderTextColor={'#666'}
              value={pacientePropietario}
              onChangeText={setPacientePropietario}
            />
          </View>

          <View style={styles.campo}>
            <Text style={styles.label}>Email del Propietario</Text>
            <TextInput 
            style={styles.input}
            placeholder='Email del Propietario'
              KeyboardType='email-pad'
              placeholderTextColor={'#666'}
              value={pacienteEmail}
              onChangeText={setPacienteEmail}
            />
          </View>

          <View style={styles.campo}>
            <Text style={styles.label}>Telefono del Propietario</Text>
            <TextInput 
            style={styles.input}
            placeholder='Telefono del Propietario'
              KeyboardType='number-pad'
              placeholderTextColor={'#666'}
              value={pacienteTelefono}
              onChangeText={setPacienteTelefono}
            />
          </View>

          <View style={styles.campo}>
            <Text style={styles.label}>Sintomas</Text>
            <TextInput 
            style={[styles.input,styles.sintomasInput]}
              placeholder='Sintomas'
              KeyboardType=''
              placeholderTextColor={'#666'}
              multiline={true}
              numberOfLines={4}
              value={pacienteSintoma}
              onChangeText={setPacienteSintoma}
            />
          </View>

        </ScrollView>
        </SafeAreaView>
        
        </Modal>
        )
}

const styles =StyleSheet.create({
  
  
  contenido:{
    backgroundColor:'#243f4f',
    flex:1,

  },
  titulo:{
    fontSize:30,
    fontWeight:'600',
    textAlign:'center',
    marginTop:30,
    color:'rgb(217, 228, 239)',

  },
  titulo2:{
    fontWeight:'900',
    color:'rgb(134, 160, 245)'

  },
  label:{
    color:'rgb(218, 226, 243)',
    marginBottom:10,
    marginTop:15,
    fontSize:30,
    fontWeight:'600',


  },
  input:{
    backgroundColor:'#e1ae6b',
    padding:15,
    borderRadius:15,
    color:'#fffff'
  },
  sintomasInput:{
   height:100,
   marginBottom:20,

  },
  campo:{
    marginTop:40,
    marginHorizontal:20,
    color:'#e4edec',

  },
  btnSalir:{
    textAlign:'center',
    fontSize:30,
    color:'rgb(1, 255, 185)',
    backgroundColor:'rgb(139, 158, 255)',
    borderRadius:15,
    marginTop:20,
    marginLeft:20,
    marginRight:300,
    marginBottom:5
    

  }
})

export default Formulario;